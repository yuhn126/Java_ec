
 - RMI(Remote Method Invocation)
 - Socket

 UDP (=우편/비연결지향)
 
 <TCP 전송방식>( = 전화기 / 연결지향)
 1. 연결방식
 	- 연결기반(connection-oriented)
 	- 연결 후 통신(전화기)
 	- 1:1 통신 방식
 	
 2. 특징
 	- 데이터의 경계를 구분 안 함. (byte-stream) -InputStream/Outputstream
 	- 신뢰성 있는 데이터 전송
 	- 데이터의 전송 순서가 보장.
 	- 데이터의 수신 여부를 확인함(데이터가 손실되면 재전송)
 	- 패킷을 관리할 필요가 없음
 	- UDP보다 전송속도가 느림
 	
 3. 관련 클래스
 	- Socket, ServerSocket
 
 <TCP 소켓프로그래밍>
  1. 서버 프로그램 : 서버소켓을 사용, 서버 컴퓨터의 특정 포트에서 클라이언트의 연결 요청을 처리할 준비
  2. 클라이언트 프로그램 : 접속할 서버의 IP주소와 포트 정보를 가지고 소켓을 생성해서 서버의 연결을 요청.
  3. 서버소켓은 클라이언트의 연결 요청을 받으면 서버에 새로운 소켓을 생성해서 클라이언트의 소켓과 연결되도록 한다.
  4. 클라이언트의 소켓과 서버의 소켓이 일대일 통신.
 	
 <Socket 프로그램> 
 - Socket은 전화기!
 - Server와 Client사이에 통신하려면 Socket을 통해 연결!
 
 
 ==> Server (클라이언트의 연결 대기 상태를 표현)
 	ServerSocket객체를 가져야 함.
 																	 [작업순서]
 	ServerSocket ss = new ServerSocket(서비스할 포트 넘버); //		 		[1]
 		 --->만약 '서버소켓'객체를 실행하는 JVM의 ip가 '192.168.0.96'라고 했을 때
 		 --->'192.168.0.96'의 5000번 포트로 소켓 서비스를 실행하겠음!
 	Socket s = ss.accept();	//클라이언트 접속 대기							[2]
 	
 	'서버'	--------> '클라이언트'에게 메시지를 전달
 	
 	OutputStream out = s.getOutputStream(); //클라이언트에 메시지 전송
 	out.write("msg"); //스트림에 쓰기작업									[4]
 
 	InputStream in = s.getInputStream(); //클라이언트가 전달한 메시지 읽어오기	[7]
 
 ==> Client
 	Socket객체를 생성
 	
 	Socket s = new Socket("HOST정보", port번호); //서버 소켓 연결 요청			[3]
 
 	InputStream in = s.getInputStream(); //서버가 전달한 메시지 읽어오기
 		in.read(); //스트림으로부터 읽기 작업									[5]
 	
 	OutputStream out = s.getOutputStream(); //서버에 메시지 전송
 		out.write("나도안녕"); //스트림에 쓰기 작업							[6]
 
 
 
 
 
 
 
 
 
 
 
 
 	