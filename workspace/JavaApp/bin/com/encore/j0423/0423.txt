<<Mission>>
문제) Vector를 이용하여 사람의 번호, 이름, 나이, 직업 ---> 저장, 조회, 수정, 삭제

실행결과)

<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 1

이름 : 홍길동
나이 : 13
직업 : 학생

<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 1

이름 : 김주원
나이 : 14
직업 : 학생

<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 1

이름 : 김유신
나이 : 15
직업 : 화랑

<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 2

#사람목록
 1 : [홍길동, 13, 학생]
 2 : [김주원, 14, 학생]
 3 : [김유신, 15, 화랑]

<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 3

수정할 번호 : 3
나이 : 19
직업 : 장군

<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 2

#사람목록
 1 : [홍길동, 13, 학생]
 2 : [김주원, 14, 학생]
 3 : [김유신, 19, 장군]
 
<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 4

 삭제할 번호 : 2
 
<사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 2
 
#사람목록
 1 : [홍길동, 13, 학생]
 2 : [김유신, 19, 장군]
 
 <사람메뉴>
1.추가  2.검색  3.수정  4.삭제  5.종료
번호입력 ==> 5

 -- END --
 
 =========================================================
 
 Person.java	  ------>	자바빈즈(서로 관련있는 속성들을 표현(저장)하는 클래스)
  - private속성 : 번호, 이름, 나이, 직업
  - 생성자 (선택사항)
  - public게터메소드, 세터메소드
 
 PersonMenu.java
  - 기능(을 정의하는) 클래스
  - 멤버변수 Vector<Person> persons;	//사람 정보를 저장
  	   ㄴint no;		//벡터에 입력되는 Person내에 1부터 시작되는 순차적인 번호 부여
  - 멤버메소드(기능메소드) :  추가,    조회,    수정,    삭제	<--- 데이터 단위[사람]
  						insert, select, update, delete
  					   (create,  find,  modify, remove)
  
 PersonMenuTest.java  ------>  main()
  - 반복적인 메뉴 출력
  - Vector에 추가할 사람 정보, 수정할 번호와 사람 정보, 삭제할 번호 입력을 받는다.
  - 선택된 번호에 따라 PersonMenu의 메소드를 호출.
  
 
 ===========================================================================
 <Exception> 예외처리
  - 프로그램 실행 중에 발생하는 예기치 않은 사건.
    (자바는 프로그램 실행 중 발생할 수 있는 예외를 처리할 수 있는 기법 제공.
     ,발생하는 모든 예외를 객체로 취급, 예외 관련 클래스 제공)
     
  예) 정수를 0으로 나누는 경우
         배열의 첨자가 음수값을 가지는 경우
         배열 첨자가 배열의 크기를 벗어나는 경우
         부적절한 형변환이 일어나는 경우{
         int su = 3.14;			//에러 ---> int자료형에서는 0.14에 대한 표현을 할 수 없다.
         int su = (int)3.14;	//su변수에 3이 저장.
         
         double d = 30;			//묵시적인 형변환!	d변수에 30.0이 저장된다.
         double d = (double)30;	//명시적인 형변환!
         
         (int)"홍길동"			//에러발생 : String와 int자료형은 공통점이 없다.
         (B)A					//에러발생 : A클래스와 B클래스 간의 상속관계가 없다.
         
         (Object)String	 ---> Object ob = (Object)'나길동';
         	---> 부모캐스팅 : 보통 생략!! Object ob = "나길동";
         	
         ob.length()    ?    (X)  -----> 부모참조변수 ob 통해 자식클래스(String)의 메소드(length()) 호출 불가!
         ob.toString()  ?    (X)  -----> toString()메소드는 어떤 클래스의 메소드 일까요?
         
         (String)Object
         ---> 자식캐스팅 : 반드시 명시 String str = (String)ob;
         str.length() ---> 3 (O)
         
         (Parent)Child데이터		(Child)Parent데이터
         ===> 상속관계에 있었을 때만 캐스팅이 가능
     }
         
         입출력시 인터럽트가 발생하는 경우
         입출력하기 위해 지정한 파일이 존재하지 않거나 파일 이름이 틀린 경우...
         
     [기본 예외 상황 처리기]
     
     		프로그램
     		   |
     		   | 실행			JVM : 예외 발생 시 관련된 예외클래스로부터 예외객체 생성,
     		   |					    프로그램에서 지정도니 예외처리루틴에게 넘겨준다.
     		예외발생
     		
     <Exception 클래스 계층 구조>
     
     				java.lang.Object
     						|
     				java.lang.Throwable
     						|
     			--------------------------
     		   |                          |
     		 Error				      Exception
     		 
     Error : 하드디스크 포맷이 망가진 경우, 메모리파괴, 스택오버플로우
     		 (프로그램 처리하지않고 JVM에게 맡겨주는게 일반적임)
     		 
==========================================================================================
<예외처리 구문 형식>

 - 이전의 throws문은 예외가 발생 시 할 일에 대해 전가의 뜻을 가짐.
 
 		void gildong()throws IOException{						void lime(){
 			readLine();												gildong();
 		}														}
 		
 	===> gildong()메소드를 실행하다가 만약 IOException이 발생하면 
 		  그 상황에 대한 처리를  lime()메소드가 하시오 (책임전가) 
 
 <예외처리 구문 형식> (try~catch문)
 
    형식)
    	try{	//예외가 발생하면 실행x
    		예외가 발생할 가능성이 있는 문장;	==>	    대체적으로 메소드 호출 문장에서 예외 호출;
    		1;
    		2;
    		3;
 		}catch(예외타입 변수명(매개변수)){	//catch(변수선언)  JVM --> catch
 			실제 예외가 발생 시 처리할 문장;
 		}finally{
 			예외 발생과 상관 없이 반드시 실행할 문장(무조건 실행)
 		}
 		
 		
 예외처리 case1) 각각 처리
 try{	
 	AException이 발생할 가능성이 있는 문장1;
 }catch(AException e){
 	AException이 발생시 처리 할 문장1;
 }
 
 try{	
 	BException이 발생할 가능성이 있는 문장1;
 }catch(BException e){
 	BException이 발생시 처리 할 문장1;
 }
 
 try{	
 	CException이 발생할 가능성이 있는 문장1;
 }catch(CException e){
 	CException이 발생시 처리 할 문장1;
 }

 	
 예외처리 case2) 다중 catch를 사용 : 일반적으로 많이 사용
 
  try{
 	AException이 발생할 가능성이 있는 문장1;
 	BException이 발생할 가능성이 있는 문장2;
 	CException이 발생할 가능성이 있는 문장3;
  }catch(AException e){
 	AException이 발생시 처리 할 문장1;
  }catch(BException e){
 	BException이 발생시 처리 할 문장1;
  }catch(CException e){
 	CException이 발생시 처리 할 문장1;
  }
  
  
  ※다중 catch 사용 시 주의할 점;
  - 부모 자식 클래스 정의하는 순서에 주의!
  - 자식 클래스에 대한 catch문을 먼저 정의를 해야함!
  
  													catch에 선언한 클래스		       예외발생 클래스
  		catch(ParentException pe){}					ParentException pe = new ParentException();
  		catch(ChildException ce){}	===> (X)		ParentException pe = new ChildException();
  		
  		catch(ChildException ce){}					ChildException pe = new ChildException();
  		catch(ParentException pe){} ===> (O)		ParentException pe = new ParentException();
 
 	
 	
 		
 		
 		
 		
 		
 		
 		