
<데이터 읽고 쓰는 Target과 자료형의 종류!>

 1. (화면)콘솔
	- 읽기
		int asciiNum = System.in.read();
		String str = br.readLine();
		
		public class System{
			public static InputStream in;
			public static PrintStream out;
			public static PrintStream err;
		}
		
		BufferedReader br;
		※BufferedReader생성자
			==> BufferedReader
		
		br = new BufferedReader(new InputStreamReader(System.in));
							 				    	  ---------
							   					              키보드입력
							        -----------------				    
							           바이트스트림 -->문자단위로 변환
			     ---------------
		              변환된 문자들을 버퍼에 저장
							
		
	- 쓰기
		System.out.println(데이터);
		System.out.print(데이터);
		System.out.printf(데이터);
	
	
 2. GUI : JTextArea ta, JtextField tf
	- 읽기
		String data = ta.getText();
		String data = tf.getText();
	- 쓰기
		ta.setText((String)"문자열 데이터");
		ta.append("문자열 데이터");
		tf.setText("문자열 데이터");
		tf.append("문자열 데이터");
	
	
				   바이트 단위                    	   문자 단위
 3. File (==> FileInputStream fis,  FileReader fr,
 			  FileOutputStream fow, FileWriter fw) 
 	
 	- 읽기
 		int b = fis.read();
 		int c = fr.read();
 		
	- 쓰기
		fos.write(바이트데이터);
		fw.write(문자데이터);
		fw.write(문자열데이터);
		
===========================================================================================

 <객체 직렬화> Serialization
 - 객체를 연속적인 데이터롤 변환하는 것
 	(반대 과정은 역직렬화라고 함)
 - 객체의 인스턴스 변수들의 값을 일렬로 나열하는 것.
 	--> 객체를 파일이나 네트워크에 전송하기 위해 바이트 형태의 데이터로 변환하는 것!
 - 객체를 스트림으로 파일에 저장하는 방법
 - transient 키워드 : 객체 멤버변수 중 직렬화 대상에 제외.
 
 
 class Person{
 	String name;
 	int age;
 	String job;
 }
 ===> class Person [String name int age String job]
 
 관련 클래스) - 객체 단위 쓰, 읽
 Object OutputStream	,		Object InputStream
 Serializable(마커 인터페이스)
 	
===========================================================================================
 <스레드> Thread
 - 프로세스내에서 순차적으로 동작하는 문장들의 단일 집합.
 - 경량(light weight)의 프로세스
 - 하나의 프로세스내에 다수개의 스레드를 정의할 수 있으며 다수개의 스레드는 동시에 수행 될 수 있다(다중스레드)
 - 자바에서는 클래스(Thread)와 인터페이스(Runnable)지원
 	
 	
 <스레드 개념>
 	void a(){								void b(){								void c(){
 		1;										4;										7;
 		2;										5;										8;
 		3;										6;										9;
 	} 										}										}
 	
 	----------------main-------------------
 	일반메소드의 경우) 기다림, 순차적인 실행!
 		a();
 		b();	===> a()메소드의 문장을 전체 실행해야 b()메소드 실행
 		c();	===> a(), b()메소드의 문장을 전체 실행해야 c()메소드 실행
 	[실행결과] 1; 2; 3; 4; 5; 6; 7; 8; 9;
 	
 	만약 a, b, c()메소드가 스레드라고 한다면) 기다림 없이, 동시에 실행!
 		a();
 		b();
 		c();
 	[실행결과] 1; 4; 7; 5; 2; 8; 9; 3; 6;
 	
 	
 	class My extends Thread{
 	
 		//스레드 특성 메소드(오버라이딩)
 		public void run(){
 			//동시(독립) 실행 코드
 		} 	
 	
 	}
 	
 	
 	
 ※스레드 객체 생성
 	Thread t = new Thread();
 	My     m = new My();
 	t.start();
 	m.start();
 	
 	// t,m --> 스레드 객체!
 	
--------------------------------------------

 class My2 extends JFrame Implements Runnable{
 
 	//스레드 특성 메소드
 	public void run(){
 		//동시 실행 코드
 	}
 
 }
 	My2 m2 = new My2();
 	//m2는 스레드 객체? (X)
 		---> Runnable객체!! (O)
 		---> 별도의 Thread객체 생성 필요.
 				---> Thread t2 = new Thread(run()메소드의 위치);
 				---> Thread t2 = new Thread(m2);
 						---> 스레드 시작 : t2.start();


 문제) MainView클래스 상단(North)에 현재 시간 정보를 출력하시오.
 	 ---> 2019년 5월 7일 3시 17분 30초
