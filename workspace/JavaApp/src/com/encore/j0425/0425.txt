Checkbox - state - true/false



===========================================
 <Event 처리>
  - Event : 사건 (~했을때)
   예) Button을 눌렀을때
   	 Scrollbar 조절바를 움직였을 때
   	 TextField에 글자를 썼을 때
   	 Frame 우측 상단의 x버튼 클릭했을 때
   	 
 - 컴포넌트에 사건이 발생했을 때 기능을

 1. 컴포넌트에 적용할 이벤트를 분석.
 
 2. EventListener(인터페이스)상속.
 				  --------> implements (구현의 약속)
 	
 	※ 인터페이스 만드는 방법
 	  - 분석된 이벤트 클래스에서 Event대신 Listener붙임!
 	  
 	예) ActionEvent ----> ActionListener
 		ItemEvent  ---->  ItemListener
 		MouseEvent ----> MouseListener
 	
 3. 메소드 구현 (이벤트 핸들러)  <===  기능 정의
 
 	class A extends implements ActionListener{
 		
 		public void actionPerformed(ActionEvent e){
 			//코드 문장 : 이벤트 발생시(예 : 버튼 눌림) 실행할 기능 구현!
 		} ==> 이벤트 처리부(EventHandler)
 		
 	}
 4. 감시자(연결자)메소드 호출 등록.
 	     ------
    	이벤트 소스			<===->  		이벤트 처리부
 	(사건을 발생시키는 컴포넌트)				(기능 정의하는 메소드)
 	     Button						  actionPerformed()메소드
 	   TextField
 	   	  List

 	형식) 이벤트소스명.add인터페이스명(이벤트핸들러위치);	//---> 연결자 등록
 	위치) setSize(); setVisible(); 이후에 기술하는 것이 좋다.
 	
 	예)   	bt.addAction:Listener(this);
 	
====================================================================

<미션> ButtonEventTest클래스를 작성하시오.
 ---> Frame에 FlowLayout을 설정하시오.
 ---> Frame에 두개의 버튼을 배치하시오.
 ---> 두 버튼의 변수명은 : bt1(라벨 : "안녕"), bt2(라벨 : "잘가")
 ---> bt1클릭시 화면 콘솔에 "안녕~!!"을 출력하시오.
 ---> bt2클릭시 화면 콘솔에 "잘가~!!"을 출력하시오.
 
 /*
	<이벤트처리> ---> 컴포넌트에 기능을 정의하자!!
	
	1. 이벤트소스(컴포넌트)에 적용할 이벤트 분석
		   Button bt  ----> ActionEvent
	2_1. ActionListener(인터페이스) ---> implements ActionListener
	2_2. public void actionPerformed(ActionEvent e){} ===> 오버라이딩
	
	3. 연결자메소드 등록		[이벤트 소스] <------------연결-------------> [이벤트 처리부]
		이벤트 소스명.add인터페이스명(이벤트 처리부의 위치);
			bt.addActionListener(this);
 */
 
	