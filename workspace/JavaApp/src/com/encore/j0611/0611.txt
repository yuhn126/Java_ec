 <작업순서>
  1. 입력폼 : x버튼 클릭 시
  	- 메인뷰 이동
  	
  2. 입력폼 : 입력 버튼 클릭 시
  	- 데이터 (3개)얻어오기 --> 하나의 변수명으로 저장하기
  	- 알맞은 모델 호출(insert) : boolean insert
  	- 입력이 잘 되었을 때 메인뷰로 이동
  		---> 이동 전 전체  Person의 정보 얻어오기
  					---> 알맞은 모델 호출(selectAll)
  		---> 정보를 메인뷰에 출력
  					---> Main뷰 클래스에 출력하는 메소드 정의(예 : displayTable)
  					
  3. 메인뷰 : 수정 버튼 클릭 시
  	- 모델 호출에 필요한 수정 번호 (사용자로 부터)얻기
  		방법1) JTable에 선택된 행의 번호 얻기
  		방법2) JOptionPane에 입력창을 통한 입력된 번호 얻기
  		
  	- 이동 전 수정폼에 출력될 내용 (DB로부터)조회 : 모델 호출
  			---> Person select(int no)
  			
	- 메인뷰 -----> 수정폼 이동
	
  4. 수정폼 : 수정버튼 클릭시
  	- 데이터 (2개) 얻어오기
  			---> 하나의 변수명으로 저장하기
  	- 알맞은 모델 호출(update)
  		boolean update(Person p)
  	- 수정이 잘 되었을 때 메인뷰로 이동
  		---> 이동 전 전체 Person의 정보 얻어오기
  					---> 알맞은 모델 호출(selectAll)
  		---> 정보(수정 후 결과)를 메인뷰(JTable)에 출력
  					---> Main뷰 클래스에 출력하는 메소드 정의(예 : displayTable)
  					
  					
  5. 메인뷰 : 삭제 버튼 클릭시
	- JOptionPane의 inputDialog를 통해 삭제할 번호 입력
	- 알맞은 모델(DAO) 호출 (delete)
   		boolean delete(int no)
	- 수정이 잘 되었을 때
 		---> 전체 Person의 정보 얻어오기
 				---> 알맞은 모델 호출(selectAll)
  		---> 정보(수정 후 결과)를 메인뷰(JTable)에 출력
				---> Main뷰 클래스에 출력하는 메소드 정의(예 : displayTable)
	- 삭제가 잘 되지 않았을때
		---> 실패 메시지 출력
		
  6. 유효성 검사(Valid Check) - 사용자가 입력한 데이터를 대상으로!
	- 입력폼, 수정폼에서 빈 값에 대한 체크
	- 입력폼, 수정폼에서 나이에 숫자값 체크
	- 삭제 번호 입력 --> 숫자값 체크
	
  7. 기타
  	- 입력폼 TextField를 초기화!
  		---> InputForm에 메소드 추가 : void initText(){
  									예 : tf_job.setText("");
								  }
  									---> 입력폼 호출시
  									---> 입력폼 : 취소 버튼 클릭 시
  									
  	- 수정폼의 취소 버튼 클릭 시 : 처음 출력된 데이터를 다시 출력
  		---> UpForm에 메소드 추가 : void initText(){
  									 예:  tf_job.setText("학생");
							   }
  		 
    - 
  
  
  
  