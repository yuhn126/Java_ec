
							         전체 프로그램 제어
 시각 담당						                 분석
    요청                                                               응답!!					          데이터 관련된 일 전담
 <View>						     <Controller>					     <Model>
 
[메인뷰]입력요청 -------------->       입력폼 필요
			<---------------  form.setVisible(true);
			
=======================================================================================
[입력폼]입력요청 -------------->      Store 저장 필요!
							   Person p = new Person(	
							     tf_name.getText()	 
							     tf_age.getText()
							     tf_job.getText());  ------------->  insert(Person p)
							
											        -------------->  selectAll()
			       							       <---Vector<Person>---
			<----------------       JTable갱신
						        displayTable(벡터)
						
			<----------------     입력된 결과 보여주기
							       (메인의 JTable)
						        main.setVisible(true);			
											  
========================================================================================
[메인뷰]수정 요청 --------------->  (데이터 출력된)수정 폼 필요!
							 갱신? 이전데이터(Person)의 변경
							 
						   int row = table.getSelectedRow()
						  //첫 행 선택 : 0, 두번째 행 선택 : 1, ...
						   int no = table.getValueAt(row,0);
															--------> select(int no)
															<-------- Person p
						 upForm.tf_name.setText(p.getName())
						  upForm.tf_age.setText(p.getAge())
						  upForm.tf_job.setText(p.getJob())
							 
			 <--------------   이전데이터를 한 개 보여주기
						       upForm.setVisible(true);


========================================================================================
[수정폼]수정 요청 --------------->     Store 갱신 필요!
							 갱신? 이전데이터(Person)의 변경
							 	수정폼안의 데이터로 변경
							Person p = new Person(upForm.upNo, Null,
						      upForm.tf_age.getText(),
						      upForm.tf_job.getText());
													 --------------->  update(Person P)
											          -------------->  selectAll()
			       							         <---Vector<Person>---
			<----------------       JTable갱신
						         displayTable(벡터)
						
			<----------------    입력된 결과 보여주기
							      (메인의 JTable)
						       main.setVisible(true);								

========================================================================================
[메인뷰]삭제 요청 --------------->     Store 삭제 필요!

						int no = showInputDialog("삭제번호 : ")
						int state = showConfirmDialog("정말 삭제?")
						state가 '예'일때 진행
													  ---------------->  delete(int no)
													  
						
											          -------------->  selectAll()
			       							          <---Vector<Person>---
			<----------------       JTable갱신
						        displayTable(벡터)
						
			<----------------     입력된 결과 보여주기
							       (메인의 JTable)
						        main.setVisible(true);		

========================================================================================
 
 1. 입력폼 초기화(이전에 입력한 텍스트 지우기)
  	- InputForm : init() 메소드 추가
  	
 2. [메인폼]수정 - JTable에서 선택된 행이 없을 때 에러!
 
 3. [메인폼]삭제 - 삭제 번호 받을 때 숫자 체크! 		==> 유효성 검사!
 
 4. 컨트롤러에서 JOptionPane객체의 대화상자(뷰 객체)사용?
			 ------------> 필요한 뷰에서 대화상자 사용!
 
 5. [입력폼]에서 데이터 입력에 대한 체크!
 	---> 빈 값, 숫자							==> 유효성 검사!
 	
 6. [메인폼]삭제 - 벡터에 존재하지 않는 번호에 대한 처리.
 
=====================================================================================================
 <자바 I/O>
 - Stream(시내,파이프)이 기본
 ---> 8bit(1byte)로 구성된 데이터의 흐름.
 
 - 입출력 4대 클래스(추상클래스 : 입출력의 특성이 되는 부모클래스)
 
 				 byte단위					문자단위				[대표메소드]
 		-----------------------------------------------------------------------
 	입력		  InputStream					Reader				 read()
 	출력		  OutputStream					Writer				 write()
 	
=====================================================================================================
 	
 	
 	
 	
 	
 	
 	

 표준 입력 : System.in
 표준 출력 : System.out, System.err(에러)

객체직렬화???????


InputStream : 모든 바이트스트림 입력 클래스의 부모 클래스로 추상클래스이다.
	... available(), read(), read(byte[] b), read(byte[] b, int offset, int len), close(), seek() ...

ByteArrayInputStream : 바이트배열로부터 읽어들이는 클래스이다.

FileInputStream : 파일을 읽어들이는 클래스이다. 먼저 파일이 존재하는지 살펴보는게 에러체킹에 유용하다.
	File f = new File("won.txt");
	if (f.isFile() && f.exists() ) {
	FileInputStream f1 = new FileInputStream("won.txt");
	.......
	}

BufferedInputStream : 데이터를 읽어들일 때 필터와 버퍼링 효과를 제공해주는 클래스

ObjectInputStream : 객체를 읽어들일 수 있는 클래스이다.




