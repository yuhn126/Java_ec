


<PersonMenu를 MVC로 작성하기>

1. 모델 com.encore.person.model
    - Person.java (자바빈) : 필드(int no, String name, int age, String job)
    - Model.java (데이터 관련 기능을 정의) : 필드 (Vector<Person> - 데이터 저장소)
        ==> 메소드 : 추가 insert, 삭제 delete, 수정 update,  조회 select
        
2. 뷰 com.encore.person.view
    - MainView.java  (시작 뷰, JTable을 통해 사람정보 출력)
            필드 : JTable table
            JButton bt_insert, bt_del, bt_update, bt_exit
            
    - InputForm.java (사람정보 입력) - 타이틀: 입력폼
            필드 : JTextField tf_name, tf_age, tf_job
            JButton bt_submit, bt_cancel
                   bt_submit의 text - 입력
            
    - UpForm.java (사람정보 수정) - 타이틀: 수정폼       
            필드 : InputForm.java와 동일
            bt_submit의 text - 수정     
                        
3. 컨트롤러 com.encore.person.control
    - Controller.java (전체 프로그램에 대한 흐름제어!!, main()포함)
    

=======================================================================================
<작업순서>
1. 뷰작성 (MainView, InputForm, UpForm)
  - 각각 원하는 모양, 디자인이 나왔는지 확인
  
2. 모델작성 (Person, Model)
  - Person 클래스
      ==> InputForm을 통해 입력받은 데이터(이름,나이,직업)를 한개의 클래스명으로 저장할 수 있는 자바빈즈작성.
      ---> 필드: int no (서로 다른 사람의 정보를 구분하기 위한 필드)
                String name, int age, String job 을 private하게 설정.  
      ---> ctrl + space : 기본생성자 추가
      ---> alt + shift + s ---> Source메뉴 ---> 오버로딩 생성자 만들기
      ---> alt + shift + s ---> Source메뉴 ---> 세터메소드, 게터메소드 만들기
            
           옵션) 각 Person의 정보를 쉽게 알기 위해 toString() 오버라이딩
      ---> alt + shift + s ---> Source메뉴 ---> toString() 만들기
      
           참고) 클래스내의 구성요소에 indent(들여쓰기)주기 단축키 : ctrl + shift + f
      
  - Model클래스
      ==> 서로 다른 사람정보(Person)를 데이터 저장소(Vector기준!!)에
                   저장, 조회, 수정, 삭제하는 기능(메소드)을 갖는 클래스
      ---> 필드: Vector<Person> personv;                   
      ---> 메소드: 컨트롤러(모델과 다른 패키지)에서 호출되어질 것이므로 public하게 작성.
                public void insert(){}   : 한개의 Person을 Vector에 저장             
                public void update(){}   : Vector내의 한개의 Person을 수정            
                public void delete(){}   : Vector내의 한개의 Person을 삭제             
                public void select(){}   : Vector내의 한개의 Person을 조회             
                public void selectAll(){}: Vector내의 모든 Person을 조회                             
                
                ---> 메소드의 리턴형과 매개변수에 대한 고민!!
                public void insert(Person p){} 
                public void update(Person p){} 
                public void delete(int no){} 
                public Person select(int no){}   //용도: 수정폼에 출력 
                public Vector<Person> selectAll( ){} //용도: JTable출력
                
                
3. 컨트롤러 작성
   - main()추가
   - main()내에서 자신의 생성자 호출.
   - 컨트롤러는 전체 클래스에 대한 제어를 해야 하므로 전체 뷰를 등록 (모델은 보통 필요할 때 객체생성)                 
     ---> 멤버에 뷰클래스 선언
     ---> 생성자에서 뷰클래스 객체 생성
           ---> 각 뷰클래스(MainView, InputForm, UpForm)내의 main()메소드 삭제
               (6개의 클래스 중 main()메소드는 한개 필요)
                  ---> main()메소드 한개가 응용프로그램(JavaApplication) 한개를 표현.
           ---> 3개의 뷰가 동시에 나타나기 때문에
                InputFrom과 UpForm에 있는 setVisible(true);를 삭제
                  ---> 시작화면에 MainView만 보임.
                  
   - 각 뷰의 요청 컴포넌트를 체크하기 위해 Listener설정
     ---> ActionListener (bt_insert, bt_del, bt_update, bt_exit, bt_submit, bt_cancel)
     ---> 이벤트 핸들러 public void actionPerformed(ActionEvent e){}추가
     ---> MainView, InputForm, UpForm내의 요청 컴포넌트(<== 이벤트소스)와 이벤트 핸들러 연결!!
            ---> eventUp()
     ---> 이벤트 핸들러 내에서 요청 컴포넌트(JButton) 구분 : if~else if            
            
            
========================================================================================            
<기능 정의>
- MainView : bt_insert
   ===> 화면(프레임)이동  : MainView ---> InputForm

- InputForm : bt_submit
   ===> 1. 뷰에 입력된 데이터(name,age,job) 얻기
        2. Person으로 묶기 (오버로딩 생성자 사용)
        3. 모델의 insert()에게 전달 : Vector에 Person정보 추가
        4. 모델의 selectAll()을 통해 Vector정보를 Main뷰(JTable)에게 전달
             ---> Main뷰에는 전달 받은 데이터를 JTable에 출력하는 메소드가 필요!!
                                        ---------------------
                                          displayTable()
                                            
        5. 화면이동: InputForm ---> MainView
        
- MainView : bt_update
   ===> JTable에 선택된 행의 번호 얻어오기.
   ===> 번호에 해당하는 Person정보를 모델 select()통해 얻기
   ===> Person정보를 UpForm에 출력하시
   ===> 화면(프레임)이동 : MainView ---> UpForm
   
- UpForm : bt_submit
   ===> 1. 뷰에 입력된 데이터(age,job) 얻기
        2. Person으로 묶기 (age,job을 한개의 변수명 Person p로 정의)
            ---> Person기본생성자 사용 (no=0,name=null,age=0,job=null)
            ---> set메소드 통한 초기화
                 setAge(age); (no=0,name=null,age=14,job=null)
                 setJob(job); (no=0,name=null,age=14,job="중학생")
                 setNo(no); (no=3,name=null,age=14,job="중학생")
                 
        3. 모델 update()에 전달                 
            ---> Vector에 일치하는 번호를 찾아 age와 job을 변경!!
            
        4. 갱신(수정)된 Vector정보 ---> 메인뷰(JTable)에게 전달
        5. 페이지(화면 프레임) 이동 : UpForm ---> MainView
        
- MainView : bt_del
   ===> 1. JOptionPane의 InputDialog를 통해 '삭제할 번호:'를 입력
        2. 모델 delete()에 삭제할 번호 전달
           ---> Vector에 일치하는 번호를 찾아 (벡터에서)해당 Person삭제!!
        3. 삭제된 Vector정보 ---> 메인뷰(JTable)에게 전달            
   
