class Parent{ }		// 추상클래스면 new Parent() 못함
class Child extents Parent{}

--------------------------------------------------
<메소드 정의>

 public void hello(Child c){
 
 }
 
 public void goodBye(Parent p){		//Parent p = new Child();
 
 }
--------------------------------------------------
 <메소드 호출>
 
 	hello(new Child());
 	Child cc = new Child();
 	hello();
 	
 	hello(new Parent()); (X) 부모는 자식에 대한 정보가 없다 / 자식객체에 부모객체가 들어갈 수 없다.
    ------------------------
	goodBye(new Parent());
	Parent pp = new Parent();
	goodBye(pp);
	
	goodBye(new Child));  (O)
	
====================================================================================

	void a(String greeting){

	}

	String b(int su){
		return "안녕하세요";
	}

	int c(){
		return 500;
	}
	
------------------------------------------
				a( b( c() ) );
	실행 순서 :   <---------
			c메소드 -> b메소드 -> a메소드 	
====================================================================================
<라인단위입력>
 클래스 BufferedReader -------> 메소드 readLine()
 API문서 정보 ===> BufferedReader(Reader in)
 		   ===> InputStreamReader(InputStream in)
 
 		A		 a	 = 	new A();
 	  Reader     r   =  new Reader(): (x) ---> 추상클래스 : 자식 ---> InputStreamReader
 InputStream 	 is	 =  System.in;
 Reader			 r   =  new InputStreamReader(is);
 BufferedReader  br	 = 	new	BufferedReader(r);
 
 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 public class BufferredReader extends Reader 

====================================================================================
<클래스 객체 생성>	----->	멤버(field, method)들에 대한 메모리 할당
 1. 동적 메모리 할당
 	- 사용안하는 객체에 대하여 가비지 컬렉터가 자동 소멸 관리
 	- 키워드 : new
 	- 사용법 : 참조변수를 통해 사용
 			 A a = new A();
 			   a.hello();
 			   
 2. 정적 메모리 할당
 	- 자주 사용되는 필드, 메소드에 대해 정의
 	- 객체들간의 통신에 사용 (공유 데이터를 표현)
 	- 키워드 : static
 	- 사용법 : 클래스명으로 참조 클래스 이름으로 접근
 			클래스명.필드명		클래스명.메소드명();	==> 클래스변수, 클래스메소드
 												==> static변수, static메소드
 							Math  . random();
 												
 	예) class B{
 			static public int su = 100;		// (O) -자료형 변수명 앞에는 순서 상관없음!
 			public static void goodBye(){} 	
 	   }
 	---------------------------------------------------
 		 <길동 개발자>			 	  <라임 개발자>
 		B.goodBye();			 B.goodBye();
 		Syso(B.su);	100출력 	    
 		 B.su++;
 		 						 Syso(B.su); 101출력
 		 						 
 		 						 
 	예) System.out   .println();
 			  ----   ----------
 			     필드	       메소드
 			     
 	public class System{
 		static PrintStream out;
 	}
 