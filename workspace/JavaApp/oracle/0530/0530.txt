 <트랜잭션> Transaction
  - 데이터 처리의 한 단위
  - 오라클에서 발생하는 여러개의 SQL명령문(DML)들을 하나의 논리적인 작업단위로 처리하는데 이를 트랜잭션이라 함.
  - 하나의 트랜잭션은 All-or Nothing방식으로 처리
  - 목적 : 데이터의 일관성을 유지하면서 안정적으로 데이터를 복구시키기 위해서.

  <트랜잭션 제어 명령어(TCL)>
  1. COMMIT
  	- 저장되지 않은 모든 데이터를 데이터베이스에 저장하고 현재의 트랜잭션을 종료하라는 명령어.
  	- 커밋하면 트랜잭션의 처리과정이 모두 반영되며 하나의 트랜잭션 과정이 끝남.
  	- 트랜잭션이 발생하는 경우 새롭게 생성되거나 갱신된 데이터들이 물리적으로 영구히 저장됨.
  	- DDL(create, drop, alter, rename, truncate)은 AutoCommit!
  	- 정상적인 종료시에도 commit 작업을 수행
  		예)exit종료
  	
  2. ROLLBACK [TO SAVEPOINT명]
  	- 저장되지 않은 모든 데이터 변경사항(DML)을 취소하고 현재의 트랜잭션을 끝내라는 명령.
  	- 트랜젝션으로 인한 하나의 묶음처리가 시작되기 이전의
  	- 이전상태로 되돌아가 지금까지 수행했던 데이터베이스의 변경을 모두 무효화.
  	- 비정상적인 종료 시 ROLLBACK작업을 수행.
  		예)우측 상단 X버튼 클릭시
  		
	문제) 10,20,30번 부서를 삭제하시오.
		delete from dept3
		where deptno IN (10, 20, 30); 
  
  3. SAVEPOINT : 부분 작업 취소
		savepoint sp1;
		rollback to sp1;


===================================================================================
 <무결성 제약 조건> Data integrity constraint rule		
 - 테이블에 부적절한 자료가 입력(insert, update)되는 것을 방지하기 위해서 테이블을 생성할 때
	각 컬럼에 대해서 정의하는 여러가지 규칙. (테이블 생성 후 컬럼에 규칙 정의하는 것도 가능)

	1. NOT NULL
		- 해당 컬럼 값으로 NULL을 허용하지 않음.
		- (행 단위 입력)입력 시 데이터를 무조건 받겠다.
		
	2. UNIQUE
		- 테이블 내에서 해당 컬럼값은 항상 유일무이한 값을 가질 것.
		- 중복을 허용하지 않겠다
		
	3. PRIMARY KEY(기본키, 주키) - (not null + unique 동시에 만족)
		- 해당 컬럼값은 반드시 존재해야 하고 유일해야 한다는 조건.
		- 테이블 내에서 서로 다른 행을 구분하기 위해서 사용.
		
	4. FOREIGN KEY (외래키, 참조키)
		- 해당 컬럼의 값이 타 컬럼 값을 참조해야만 함.
		     즉, 참조되는 컬럼에 존재하지 않는 값은 입력 불가.
		- 참조하는 테이블에에서 설정(예 : 사원테이블의 deptno에 참조키 설정)
							 -------
							  자식 테이블
		- 참조되는 쪽 테이블(부서 테이블)
					 -------
					   부모 테이블
					   
					   				참조
		  EMP테이블(deptno) -------------------------> DEPT테이블(deptno)  
		  													   10
		  													   20
		  													   30
		  													   40
		  													   
		사원insert시 (empno,ename,deptno)                                                                                          
        values (8000,'김길동', 30)    ==> 존재하는 부서30에 저장 성공!!                                  
        values (8002,'박길동', 50)    ==> 존재하지 않는 부서50에 저장 실패!!
        
		SCOTT사원의 사번==> 7788
		update emp set deptno=70 where empno=7788;   ==> 존재하지 않는 부서70으로 인해 에러발생!! 
		  
		  
	5. CHECK
		- 해당 컬럼에 저장 가능한 데이터 값의 범위나 사용자 조건을 지정.
		 age컬럼 : ( 1 ~ 100 )
		 gender컬럼 : (남성, 여성)

================================================================================
 <제약조건 설정하기1> - 컬럼 레벨 정의 방법
  ---> 컬럼 레벨 : 제약조건의 명시를 테이블 생성 시 컬럼 정의와 함께!(같은 줄에 제약 정의)
  
	형식)
		create table 테이블명(
			컬럼명 자료형  CONSTRAINT_TYPE
		);
		
	drop table dept2;
	create table dept2(
		deptno		number(2),
		dname		varchar2(15),
		location	varchar2(15)
	);
	
	insert into dept2 values (10, '영업부', '서울');
	insert into dept2 values (10, '자재부', '서울');
	insert into dept2 values (null, '총무부', '서울');
	insert into dept2 values (10, '영업부', '서울');
 
 <제약조건 설정하기 1_2> - 컬럼 레벨(컬럼 선언 시)정의 방법 + 제약 이름 지정!
 	형식)
 		create
		    
 ==============================================================================
 <제약종류(constraint_type)>
  1. not null
  	- 데이터를 반드시 입력!
  	- 수정 시 null로 변환 불가!
  	
  			
		
 <제약조건 설정하기2> - 테이블 레벨(전체 컬럼 선언이 끝나고 난 후) 정의 방법
 	create table emp2(
 		empno	number(4),
		ename	varchar2(15),
		sal		number(7,2),
		job		varchar2(15),
		
		constraint emp2_empno_uk	unique(empno)
	);
		
	insert into emp2 values (7000, '홍길동', 2000, '사원');	
	insert into emp2 values (7002, '홍길동', 2000, '사원');	
	insert into emp2 values (7002, '홍길동', 2000, '사원');	
		
		
		
 <제약조건 설정하기3> - 제약추가 : 이미 테이블 객체가 만들어진 상태에서 제약 추가!
 	alter table emp2
 	add constraint emp2_pk primary key (empno);
 	
 	insert into emp2 values (8000, '홍길동', 2000, '사원');
 	insert into emp2 values (8000, '홍길동', 2000, '사원');
 	--> 에러
 	
 	insert into emp2 values (null, '홍길동', 2000, '사원');
	--> 에러
	
	
	- primary key(emp2_pk)삭제
		삭제1)
			alter table emp2
			drop constraint emp2_pk;

		삭제2)
			alter table emp2
			drop primary key;				
		
-------------------------------------------------------------
	 문제) emp2테이블을 새롭게 생성(empno, ename, sal, deptno컬럼)하고 테이블 생성 후
	 	empno에 primary key 설정을 하고 ename, sal, deptno에 not null설정하시오.
	 	
	 	create table emp2 (
	 		empno number(4),
	 		ename varchar2(15),
	 		sal number(7,2),
	 		deptno number(2)
	 	);
	 	
	 	-- primary key 설정
	 	alter table emp2
		add constraint emp2_pk primary key(empno);
	 	
	 	-- not null 설정
	 	alter table emp2
	 	add constraint emp2_ename_nn not null(ename);
	 	--> 에러
 	
 	
 <제약 수정>
 	ALTER TABLE 테이블명
 	MODIFY 컬럼명 [CONSTRAINT 제약명](NOT NULL | NULL);
 	
 	alter table emp2
 	modify ename not null;
 	
 	alter table emp2
 	modify sal not null;
 	
 	alter table emp2
 	modify deptno not null;
 	
 	
 <제약이름을 통한 not null삭제>
 	alter table emp2
 	modify sal constraint emp2_sal_nn not null;
 			null ---> not null변경
 			
 	alter table emp2
 	drop constraint emp2_sal_nn;
 	
 	
 	
 	
 	
	 문제2) emp2테이블 내의 empno에 primary key설정, deptno에 foreign key 설정을 하시오.
			
		alter table emp2
		add constraint emp2_empno_pk primary key (empno);
		---> 변경 성공
			
		alter table emp2
		add constraint emp2_deptno_fk
			foreign key (deptno) -- 현재테이블의 컬럼
			references dept2 (deptno); -- 참조(부모)테이블의 컬럼
		-- 에러 /참조되는 컬럼(dept2테이블 --> deptno컬럼)은 반드시 unique 또는 primary key 설정	
					
		- dept2의 deptno : unique 설정
			alter table dept2
			add constraint dept2_uk unique (deptno);
			 
			 또는 	
				
		- dept2의 deptno : primary key 설정
			alter table dept2
			add constraint dept2_pk primary key (deptno);


--------------------------------------------------------------------------------
 문제1) emp3테이블을 새롭게 생성(empno, ename, sal, deptno)하고  dept3테이블을 dept테이블을
 	    참조하는 서브쿼리를 통해 생성(전체구조, 데이터)하시오.
 	  	create table emp3(
			empno number(4),
			ename varchar2(15),
			sal number(7,2),
			deptno number(2)
		); 
											
		create table dept3
		as select * from dept;
		
 문제2) emp3테이블의  deptno가 dept3테이블의 deptno를 참조하도록 하시오.
 	  (dept3테이블의 deptno에 unique설정)
 	  
		alter table dept3
		add constraint dept3_uk unique(deptno);
 	  
		alter table emp3
		add constraint emp3_fk foreign key(deptno) -- 현재(자식)테이블
			references dept3(deptno);			   -- 부모 테이블
 	  
 문제3) dept3테이블의 unique제약을 삭제하고 deptno에 primary key 제약 설정
 		alter table dept3
 		drop constraint dept3_uk;
 		--> 에러/참조하는 (자식) 테이블이 존재하는 경우는unique와 primary key를 삭제할 수 없음.
 		
 	삭제 해결1)참조하는 테이블의 foreign key를 삭제 후 부모테이블의 unique, primary key 삭제
 		- 외래키 삭제(자식 테이블쪽의 foreign key)
 			alter table emp3
 			drop constraint emp3_fk;
 			
 		- unique 삭제
 			alter table dept3
 			drop constraint dept3_uk;
 			-->변경성공
 		
 		select table_name, constraint_name
 		from user_constraints
 		where table_name in ('emp3', 'dept3');
 			
 	삭제 해결2)CASCADE 옵션을 사용 (참조하는 (자식)테이블이 여러개 있을 때 유용)
 		alter table dept3
 		drop constraint dept3_uk CASCADE;
 		==> 변경성공!
 		==> CASCADE : 자동으로 관련된 모든 fk를 먼저 삭제해줌.

 <CHECK 제약>
  - 특정 범위 내의 데이터만 입력
  - 정해진 데이터만 입력
    형식) CHECK(조건식)
    
	문제)emp4테이블 생성
		사원 번호		: 행을 구분하는 용도 				- primary key
		사원명			: 기본값 '무명'지정				- default 데이터
		급여			: 최소 500 ,최대 1000			- check(조건식)
		매니저 		: 반드시 입력					- not null
		부서번호		: 부서 테이블(dept3)의 부서번호 참조	- foreign key
		성별(gender)	: 'F' 또는 'M'입력 체크 			- check(조건식)
		
		
		drop table emp4;
		
		create table emp4(
			empno number(4) constraint emp4_empno_pk primary key,
			ename varchar2(15) default '무명',
			sal number(7,2) check(sal between 500 and 1000),
			mgr number(4) not null,
			deptno number(2) constraint emp4_empno_fk references dept3(depno),
			gender char(1) check(gender in('M', 'F'))
		);
		==> 테이블 생성 성공
		
		insert into emp4 (empno, ename, sal, mgr, deptno, gender)
		values(8000, '홍길동', 1000, 8001, 10, 'F');
		
		insert into emp4 (empno, ename, mgr, deptno)
		values(8001, 1000, 8001, 10); -- ename = '무명'
		
		insert into emp4 (empno, ename, sal, mgr, deptno, gender)
		values(8002, '길라임', 1001, 8001, 10, 'F'); -- check에러/sal --> 500~1000
		
		insert into emp4 (empno, ename, sal, mgr, deptno, gender)
		values(8003, '김주언', 1000, 8001, 10, '남');
											 'Y'	-- check에러 / gender --> 'F' or 'M'
		
		
	※참고)
		create table emp5(
			deptno number(2) references 참조테이블명(참조컬럼명)on delete cascade
				-- 부모 (부서)테이블에서 특정 번호(예 : 10번부서)를 삭제했을 때
				       자식 (사원)테이블에서 10번 부서에 근무하는 사원들을 삭제!
		);
		
		create table emp5(
			deptno number(2) reference 참조테이블명(참조컬럼명) on delete set null
				-- 부모(부서)테이블에서 특정 번호 (예 : 10번부서)를 삭제했을때
				      자식 (사원)테이블에서 10번 부서에 근무하는 사원들의 deptno를 null값으로 변경!
		
		
==========================================================================
 <데이터 딕셔너리> DD 시스템 테이블
  - 데이터베이스 자원을 효율적으로 관리하기 위한 다양한 정보를 저장하는 시스템 테이블.
  - 사용자가 테이블을 생성하거나 사용자를 변경하는 등의 작업을 할 때 데이터베이스 서버에 의해 자동으로 개인되는 테이블.		
 
 <제약조건 확인하기>
  - user_constraints
  - desc user_constraints
  
  OWNER	   		    : 제약조건을 소유한 사용자명
  CONSTRAINT_NAME   : 제약조건명
  CONSTRAINT_TYPE   : 제약 조건 타입
  TABLE_NAME	    : 제약이 속한 테이블명
  SEARCH_CONDITION  : check제약일 경우 조건으로 사용되어지는 설명.
  R_CONSTRAINT_NAME : foreign key경우 어떤 primary key를 참조했는지 정보.
  
 <CONSTRAINT_TYPE>
	P : primary key
	R : foreign key
	U : unique
	C : check, not null
  
 	
=========================================================================
 ※ALTER 정리
 
	ALTER TABLE 테이블명
	
	컬럼 추가 : ADD(추가컬럼명 자료형)
	컬럼 수정 : MODIFY(기존컬럼명 자료형)
	컬럼 삭제 : DROP COLUMN 삭제할 컬럼명
 
 1. 제약 설정(추가)
  - 컬럼 레벨 설정
  		create table 테이블명(
  			컬럼명1 자료형 [CONSTRAINT 제약명] constraint_type,
  			컬럼명2 자료형,
  			컬럼명3 자료형,
  		);
  		
  - 테이블 레벨 설정
  		create table 테이블명(
  			컬럼명1 자료형 [CONSTRAINT 제약명] constraint_type,
  			컬럼명2 자료형,
  			컬럼명3 자료형,
  		);
  
 2. 제약 삭제
 	alter table 테이블명
 	DROP constraint 제약명;
 	
 	alter table 테이블명
 	DROP primary key;
  
 3. 제약 수정(null <---> not null)
  	alter table 테이블명
  	MODIFY 컬럼명 [CONSTRAINT 제약명] NOT NULL|NULL;
  
========================================================================= 
 