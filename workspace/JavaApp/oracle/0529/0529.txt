 [조인의 종류]
  - cross join	==> where절 없이 사용하는 조인.	
  				==> 각 테이블이 갖는 행의 곱 만큼 결과 행을 생성
  				
  - equi join 	==> 테이블간에 공통된(연관된) 컬럼을 '='를 통해 비교
  
  - non-equi join ==> 대소 비교, 범위를 표현하는 연산자를 사용
  
  - self join 	==> 같은 테이블을 두 번 이상 참조 조회.
  					마치 테이블이 두 개 이상 존재하는 것 처럼 사용
  					조회하고자 하는 데이터가 같은 행에 없을 때 사용!
  					
  - outer join	==> 조회 결과행에(빠진) 행을 출력하고 싶을 때 사용
		select e1.name || '사원의 상사는' || e2.name || '입니다.'
		from emp e1, emp e2
		where e1.mgr = e2.empno;
			==> 기대 : 14명 사원 각각의 직속 상사명 출력!
			==> 실제 : 13행(13명의 사원)출력
			==> 원인 : 매핑되지않는 행이 존재
			==> 해결 : where e1.mgr = e2.empno(+);
 -----------------------------------------------------------------------------------------
  <ANSI 조인> - 표준 조인, DBMS종류와 상관 없이 실행.
  			- from 뒤에 ',' 콤마를 사용하지 않는다.
  - cross join
  
  - inner join
  		from emp inner join dept
  		on 공통컬럼 비교					===> 반드시 정의,  using절로 대체 가능
  		on emp.deptno = dept.deptno
  		
  		using(deptno)
  		
  		where 추가 가능					===> 추가적인 조건 검색
  		
  - natural join - 두 테이블을 비교해서 동일한 이름의 컬럼을 자동 using해준다.
  		from emp natural join dept
  		
  - outer join
  		from emp (left|right|full) [outer] join dept
  		
==============================================================
 <서브쿼리>
  - 특정 테이블에서 검색된 결과를 다른 테이블에 전달하여 새로운 결과를 검색 할 때 사용.
  - 메인쿼리 이외의 추가되는 모든 select문!
  
		select 컬럼명, 					---> 메인쿼리
				(select ~ from ~)		---> 서브쿼리 : 1행1열
		from 테이블명,
				(select~ from~)			---> 서브쿼리, 인라인 뷰 : 다수행 다수열
		where 컬럼명 연산자 데이터
				 논리 연산자(or|and)
				 컬럼명 연산자(select~ from~)		---> 서브쿼리
							             ----------
												결과행 --> 1개		 : 연산자 =, <, >
												결과행 --> 2개 이상 : 연산자에 등호, 부등호 사용 불가

 다중행 연산자 사용)
 	where deptno IN 	(select deptno
 		 				 from dept
 		 				 where deptno < 30)
 		 						 
 	from emp  -- 14행
 	where sal 	>	ANY	(select sal				--> 아무 조건이나 만족해도 됨.
 		 				 from emp				--> 20번 부서의 최소 급여보다 더 많은 급여를 받는
 		 				 where deptno = 20)
 		 							
 	from emp  -- 14행
 	where sal 	>	ALL	(select sal				--> 모든 조건에 만족해야 됨.
 		 				 from emp				--> 20번 부서의 최대 급여보다 더 많은 급여를 받는
 		 				 where deptno = 20)
 		 							
 	where exists (서브쿼리)	--> 서브 쿼리 결과 행이 0개 : false
 						--> 서브 쿼리 결과 행이 1개 이상 : true						

=========================================================================
 <DDL>
  - create, drop, alter, rename, truncate
  
  <테이블 생성1>
  	create table 테이블명(
  		컬럼명1 자료형,
  		컬럼명2 자료형
  	);
	----> 테이블 객체 생성! 구조만 생성, 데이터는 없음 ==> 앞으로 insert명령문 통해 행 단위의 입력


  <테이블 생성2 - 서브쿼리를 이용한 테이블 생성>
   - 기존 테이블의 구조(컬럼, 자료형)와 데이터를 복사
   - 제약(constraint)은 복사에서 제외!
     ------------------
      not null, unique, primary key, foreign key, check

	형식)
		CREATE TABLE 테이블명
		AS 서브쿼리;
		
		drop table emp2;
		drop table emp3;
		drop table emp4;
	
		create table emp2
		as select * from emp;
		--> emp테이블에 있는 모든 데이터를 복사해서 새로운(독립적인) emp2테이블 생성
		
  <테이블 생성3 - 서브쿼리를 이용한 테이블 생성 : 원하는 컬럼과 행만 복사>
  
  	create table emp3
  	as select empno, ename, job
  	   from emp
  	   where deptno = 30; -- 행 제어, where절 생략 시 모든 행!


  <테이블 생성4 - 서브쿼리를 이용한 테이블 생성 : 구조(컬럼, 자료형)만 복사, 데이터 복사x>
  	create table emp4
  	as select * from emp
  	   where '길동' = '라임';
  	   
  	desc emp4 --> 출력o
  	select * from emp4; --> no rows selected (결과행 없음 : 데이터없음)
  	
 <테이블의 구조 변경하기> ALTER
  - 컬럼 추가, 컬럼 삭제, 컬럼의 자료형, 바이트 수를 변경
  
  	alter table emp4
  	add (email varchar2(20));
  	--> table altered.
  	 
  	insert into emp4 (empno, ename, email)
  	values (8000, '나길동', 'gildong@naver.com');
  	--> 1 row created.
  	
  	insert into emp4 (empno, ename, email)
  	values (8002, '박명수', 'gildongyayaya@naver.com');
  	--> Error, 메일주소가 varchar2(20)을 넘어감
  	
  	alter table emp4
  	modify (email varchar2(30));

	insert into emp4 (empno, ename, email)
  	values (8002, '박명수', 'gildongyayaya@naver.com');
  	--> 행 입력 성공

	alter table emp4
	drop column email;
	--> 'email' 컬럼 삭제


	※ ALTER 정리
	
	ALTER TABLE 테이블명
	-----------------
	컬럼 추가 : ADD(추가 컬럼명 자료형)
	컬럼 수정 : MODIFY(기존 컬럼명 자료형) 
	컬럼 삭제 : DROP COLUMN 삭제 할 컬럼명
	컬럼 이름 변경 : RENAME COLUMN 기존컬럼명 TO 새컬럼명
	컬럼 사용 안함 : SET UNUSED(컬럼명)
	UNUSED설정된 컬럼들 삭제 : DROP UNUSED COLUMN
	
=============================================================================================
 <테이블 객체 삭제>
 	형식) DROP TABLE 테이블명
 	
 		select tname, tabtype from tab;
 		--> 연결 계정이 갖는 테이블명과 테이블 타입을 출력
 		
 		
 <테이블 객체 이름 변경>
 	형식) RENAME old_객체명 TO new_객체명;
 	
 		rename emp2 to 사원테이블;
 		
 		
 <테이블의 전체 데이터 지우기>
 	형식) TRUNCATE TABLE 테이블명;
 	
 		select count(*) from 사원테이블;
 			
 		truncate table 사원테이블;
 		---> ※ 주의 : truncate명령어를 통해 삭제된 데이터는 복구가 불가능!
 											---------
 											rollback 불가능 --> DDL은 AutoCommit!
	 
=================================================================================================
 <DML> Data Manipulation Language : 데이터 조작어
  - INSERT(입력) DELETE(삭제) UPDATE(수정, 재입력) <-- 행 단위 실행
  
  <INSERT> : 테이블에 (행)데이터를 추가 (최초 입력)!!
  
	형식) INSERT INTO 테이블명 [(컬럼명1, 컬럼명2, 컬럼명3)]
		 VALUES (데이터1, 데이터2, 데이터3);
		 
		---> 만약, 테이블명 뒤에 컬럼명을 생략하는 경우
			   테이블 구조에 있는 순서에 따라 전체 컬럼명이 명시된 것으로 간주!
		---> 명시된 컬럼의 갯수와 데이터 갯수는 반드시 일치.
		---> 컬럼의 순서에 맞는 자료형 데이터가 와야함.
			   
	
	
 <NULL값 입력 방법>
 	1. 컬럼명을 명시하지 않는다.
 		create table dept3
 		as select * from dept;
 		
 		insert into dept3(deptno, dname) values(50,'개발부');
 		
 	문제)아직 부서의 위치가 정해지지 않은 부서는 어디?
 		select dname
 		from dept3
 		where loc is null;
 		==> 개발부
 		
 	2. 데이터가 들어가는 자리에 직접 null을 명시.
 		insert into dept3(deptno, dname, loc) values(60, '기획부', null);
 		insert into dept3 values(60, '기획부', null);
 		
 	3. 데이터가 들어가는 자리에 ''를 입력
 		insert into dept3(deptno, dname, loc) values (70,'총무부','');
 		
 		--> 오라클 : ''입력과 null입력은 같다!
 				 -------------------
 				 ''입력시 조건식 : loc is null
 		--> MS SQLServer : ''입력과 null
 		
 	문제) 아직 부서의 위치가 정해지지 않은 부서는 어디?
 	
 	
 <서브쿼리로 행 추가>
 	형식)
 		INSERT INTO 테이블명 [(컬럼명)]
 		서브쿼리; 
 	
	 	create table dept4
	 	as select * from dept
	 	where 1 = 0;			--dept테이블의 구조(컬럼)만 복사, 데이터 복사x
	 	
	 	insert into dept4
	 	select * from dept;
	 	---> 4 rows created
 	
 	문제) dept5테이블을 생성하고(dept테이블의 구조만 복사, 데이터복사x)
 		dept테이블의 20, 40번 부서의 정보(부서번호, 부서이름)를 서브쿼리를 통해 입력하시오.
 		
 			insert into dept5 (deptno, dname)
			select deptno, dname from dept where deptno = 20 or deptno= 40;
 	
 	문제) 만약 dept테이블의 부서 번호가 10단위로 구성되어 있다고 가정했을 때 10, 30, 50, 70,...번 부서의 정보를
 		 dept5테이블에 옮기시오. (서브쿼리를 통한 행 추가)
 		 
 			insert into dept5
			select * from dept where mod(deptno,20) != 0;
			
 <다중 테이블에 다중 로우(행)입력>
 	형식)
 		INSERT ALL
 			INTO 테이블명1 VALUES (COL1, COL2, COL3)
 			INTO 테이블명2 VALUES (COL4, COL5, COL6)
 			INTO 테이블명3 VALUES (COL7, COL8, COL9)
 			
 		SELECT COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9
 		FROM 테이블명;
 		
 	문제) emp테이블에서 30번 부서 사원들의 정보를 얻어서(조회해서) emp_hir(구조만 : empno, ename, hirdate)테이블과
 		emp_mgr(구조만 : empno, ename, mgr)테이블에 데이터를 입력하시오.
 		
 		create table emp_hir
 		as select empno, ename, hiredate
 		from emp
 		where 1 = 0;
 		
 		create table emp_mgr
 		as select empno, ename, mgr
 		from emp
 		where 1 = 0;
			
	 	INSERT ALL INTO emp_hir VALUES (empno, ename, hiredate)
	 			   INTO emp_mgr VALUES (empno, ename, mgr)
	 	SELECT empno, ename, hiredate, mgr  -- 6행 4열
	 	FROM emp							-- 14행 8열
	 	where deptno = 30;					-- 6핼 8열
	 	
 <조건(when)에 의해 다중 테이블에 다중 로우 입력하기>
 	형식) WHEN 조건식 THEN 실행 할 문장
 	
 	테스트 테이블 생성)
 		create table emp_hir2
 		as select empno, ename, hiredate
 		from emp
 		where 1=0;
 		
 		create table emp_sal
 		as select empno, ename, sal
 		from emp
 		where 1 = 0;
 		
 	문제)1982년 이후에 입사한 사원의 정보를 emp_hir2테이블에 입력하고 
 		급여가 2000이상인 사원의 정보를 emp_sql테이블에 입력하시오. (insert all사용, 데이터정보는 emp테이블에서 조회)
	 	
	 	insert all when hiredate >= to_date('1982/01/01')
	 	then into emp_hir2 values(empno, ename, hiredate)
	 	where sal >= 2000
	 	then into emp_sal values (empno, ename, sal)
	 	select empno, ename, hiredate, sal
	 	from emp;
	 	
======================================================================================
 <UPDATE> : 기존 데이터에 대한 수정, 갱신, 재입력
 	형식)
 		UPDATE 테이블명
 		SET    컬럼명1=(변경할)데이터, 컬럼명2=(변경할)데이터
 		[WHERE 조건식];
 		
 		
 	※주의 : UPDATE와 DELETE문을 실행하기 전 반드시 WHERE절 사용을 고려하자!
 		왜? WHERE절을 사용하지 않는 다면 전체 행에 대한 수정 또는 삭제가 실행되기 때문!
 		
 			
 	문제)10번 부서의 위치를 '서울'로 변경하시오.
 		update	테이블명
 		set		컬럼명 = 데이터
 		where	조건식;
 		
 		update dept3
 		set loc='서울';
 		
	 
	문제) 30번 부서의 급여를 10% 인상해라
	 	update emp3
	 	set sal = sal*1.1;
	 	
 <서브쿼리를 이용한 데이터 수정>
 	drop table dept4;
 	create table dept4
 	as select * from dept;
 	
 	문제)부서번호 20번의 부서명과 지역을 40번 부서와 동일하게 변경하시오.
 						  -------
 						  	정보복사
 		update dept4
 		set dname = (select dname from dept4 where deptno=40),
 			loc = (select loc from dept4 where deptno=40)
		where deptno = 20;
 	
	 	update dept4
	 	set (dname, loc) = (select dname, loc
	 						from dept4
	 						where deptno = 40)
	 	where deptno = 20;
	 
===================================================================
 <DELETE> : (행 단위)데이터 삭제 명령어
	형식)
		DELETE FROM 테이블명 -- 전체 행 삭제 (모든 데이터)
		[WHERE 조건식];	 -- 특정 행 삭제
 		 데이터지우고 인덱스지우고.....
 		 TRUNCATE --> 그냥싸그리그냥
 		 
 		 
	문제) 부서테이블(DEPT4)내의 모든 부서를 삭제하시오.
		delete from dept4;
		
	문제) DEPT4테이블을 유지한 상태(ROLLBACK하지 말고)에서 DEPT테이블의 데이터를 복사하시오.
		insert into dept4
		select * from dept;
		
	문제) DEPT4테이블에서 20번 부서를 삭제하시오.
		delete from dept4 where deptno = 20;
		
	문제) SALES부서에 속한 사원들을 사원테이블(EMP3)에서 삭제하시오.
		drop table emp3;
		create table emp3
		as select * from emp;
		
		delete from emp3
		where deptno = (select deptno from dept4 where dname='SALES'); 
 		
 
 
 <MERGE>
	합병(병합) : 구조가 같은 두 개의 테이블을 하나의 테이블로 합치는 기능.
	 - 기존에 존재하는 행이 있다면 새로운 값으로 갱신(update)되고 존재하지 않는 행이 있다면 새로운 행으로 추가(insert)해라 
 
 
 	형식)
 		MERGE INTO 기준 테이블명 별명	-- 병합 결과 반영할 테이블!
 			USING  참조 테이블명 별명	-- 병합에 영향을 미칠 데이터를 담는 참조 테이블
 			ON (매칭 조건식)			-- 관련된 행(같은 행)인지를 판별
 		WHEN MATCHED			-- 매칭되는 행이 있다면
 			THEN 업데이트문
 		WHEN NOT MATCHED		-- 매칭되는 행이 없다면
 			THEN 추가문;
 
 
 		merge into emp11 e1
 		using emp12 e2
 		on(e1.empno = e2.empno)
 		when matched then 
 				update set e1.job = e2.job
 									e1.mgr = e2.mgr
 									e1.sal = e2.sal
 									e1.comm = e2.comm
 									e1.deptno = e2.deptno
 		when not matced then
 				insert values (e2.empno, e2.ename, e2.job, e2.mgr,
 							   e2.hiredate, e2.sal, e2.comm, e2.deptno);
 
 
 
 
 
 
 
 
 
 
 
 
 