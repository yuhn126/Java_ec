============================== JOIN문제 ============================================
※아래의 문제들을 ANSI JOIN으로 해결하시오.

문제1) 사원들의 이름, 부서번호, 부서이름을 출력
		select ename, empno, dname
		from emp inner join dept
		on emp.deptno = dept.deptno;
		
		select ename, empno, dname
		from emp inner join dept
		using(deptno);
		
		select ename, empno, dname
		from emp natural join dept;

문제2) 부서번호가 30번인 사원들의 이름, 직급, 부서번호, 부서위치를 출력
		select ename, job, e.deptno, loc
		from emp e inner join dept d
		on e.deptno = d.deptno
		where e.deptno=30;
		
		select ename, job, deptno, loc
		from emp inner join dept
		using(deptno)
		where deptno=30;
		
		select ename, job, deptno, loc
		from emp natural join dept
		where deptno=30;

문제3) 커미션을 받는 사원의 이름, 커미션, 부서이름, 부서위치 출력(커미션 0은 제외)
		select ename, comm, dname, loc
		from emp inner join dept
		on emp.deptno=dept.deptno
		where comm > 0 and comm is not null;
		
		select ename, comm, dname, loc
		from emp inner join dept
		using (deptno)
		where comm>0;
		
		select ename, comm, dname, loc
		from emp natural join dept
		where comm>0;
		
문제4) DALLAS에서 근무하는 사원들의 이름, 직급, 부서번호, 부서이름을 출력
		select ename, job, emp.deptno, dname
		from emp inner join dept
		on emp.deptno=dept.deptno
		where loc='DALLAS';
		
		select ename, job, deptno, dname
		from emp inner join dept
		using(deptno)
		where loc='DALLAS';
		
		select ename, job, deptno, dname
		from emp natural join dept
		where loc='DALLAS';
		
문제5) 사원이름에 'A'가 들어가는(포함하는) 사원들의 이름과 부서이름을 출력
		select empno, ename, dname
		from emp inner join dept
		on emp.deptno=dept.deptno
		where ename like '%A%';
		
		select empno, ename, dname
		from emp inner join dept
		using(deptno)
		where ename like '%A%';
		
		select empno, ename, dname
		from emp natural join dept
		where ename like '%A%';
		
문제6) 사원이름과 직급, 급여, 급여등급을 출력
		select ename, job, sal, grade
		from emp cross join salgrade
		where sal between losal and hisal;
		
문제7) 사원들의 이름과 그 사원과 같은 부서에 근무하는 사원의 사원명, 부서번호를 출력
       ===> 자기 이름을 제외한 동료(56행) 정보 출력!!
		select e1.ename,e2.ename,e2.deptno
		from emp e1 inner join emp e2
		on e1.deptno=e2.deptno
		where e1.deptno != e2.deptno;
		
		
==========================================================================
 <서브쿼리> ★Sub Query
  - 특정 테이블에서 검색된 결과를 다른 테이블에 전달하여 새로운 결과를 검색 할 때 사용.
  
	문제) JAMES 사원이 근무하는 부서 이름을 출력
		select deptno
		from emp
		where ename='JAMES';
		----> 30번 부서 근무!
		
		select dname 					-----> 메인쿼리
		from dept 
		where deptno = (select deptno	-----> 서브쿼리 
						from emp
						where ename='JAMES');
						
	문제) FORD사원과 동일한 직책을 가진 사원에 대해 사원번호, 사원명, 급여, 직책을 출력하시오.	
		select empno, ename, sal, job
		from emp
		where ename ^= 'FORD'
			  and job = (select job
					 	from emp
					 	where ename='FORD');
					 	
	문제) MARTIN사원의 급여와 동일하거나 더 많이 받는 사원의 사원명, 급여를 출력.
		select ename, sal
		from emp
		where sal >= (select sal
						from emp
						where ename='MARTIN')
			  and ename != 'MARTIN'
		order by sal;
		
	문제) DALLAS에서 근무하는 사원의 이름, 부서번호 출력	
		select ename, deptno
		from emp
		where deptno=(select deptno
						from dept
						where loc='DALLAS');
=============================================================================
 문제) SALES부서에서 근무하는 모든 사원의 이름과 급여, 부서번호를 출력
 		select ename, sal, deptno
 		from emp
 		where deptno=(select deptno
 						from dept
 						where dname='SALES');
 
 문제) 자신의 직속상사가 KING인 사원의 이름과 급여, 직속상사의 사원번호를 출력.
 		select ename, sal, mgr
 		from emp
 		where mgr=(select empno
 					from emp
 					where ename='KING');
 					
 문제) 평균급여보다 많은 급여를 받은 사원들의 사번, 사원명, 급여를 출력.(급여 내림차순)
 		select empno,ename, sal
 		from emp
 		where sal>(select avg(sal)
 					from emp)
 		order by sal desc;
 					
 문제) 10번 부서의 사원 중 전체(사원) 최대급여를 받는 사원과 동일한 급여를 받는 사원의 사원번호와 사원명을 출력.
 		select empno, ename
 		from emp
 		where sal=(select max(sal)
 					from emp
 					where deptno=10); 
 		
 문제) 10번 부서에서 근무하는 사원의 이름과 10번 부서의 부서명을 출력하시오.
 		select a, b, c, d, e, f
 		from (select a,b,c from test1), (select d,e,f from test2);
 			  -----------------------
 			  from뒤에 테이블명(행열구성!)도 올 수 있고 서브쿼리(결과값:행열)도 위치할 수 있다.
 		
 		select empno, ename, sal	---> 에러발생 : 서브쿼리에 sal컬럼에 대한 정보가 없기 때문
 		from (select empno, ename from emp);
 		
 		select ename, dname
 		from emp, (select dname from dept where deptno=10)
 		where deptno=10;
 		
 
 문제) BLAKE와 같은 부서에 있는 사원들의 이름과 입사일자, 부서번호를 출력하시오.		
 		select ename, hiredate, deptno
 		from emp
 		where ename != 'BLAKE' and deptno=(select deptno
 											from emp
 											where ename='BLAKE');
 											
 		--->사원추가!								
 			insert into emp (empno, ename, hiredate, deptno)
			values(8000, 'BLAKE', sysdate, 20);									
 		==>행추가성공
 		
 		select ename, hiredate, deptno
 		from emp
 		where deptno=(select deptno
 						from emp
 						where ename='BLAKE');
 
 		select ename, hiredate, deptno
 		from emp
 		where deptno IN (select deptno
 							from emp
 							where ename='BLAKE');
 							
 							
 <다중 행 서브쿼리> --> 서브쿼리의 결과 행이 여러개(2개행 이상)
  - 서브쿼리에서 반환되는 결과가 두 개 이상의 행일 때 사용하는 서브 쿼리.
  - 반드시 다중 행 연산자(Multiple Row Operator)와 함께 사용
 	 
 	 ※ 다중 행 연산자
 	 	IN : 메인쿼리의 비교조건이 서브쿼리의 결과 중에서 하나라도 일치하면 참.
 	 	   : su in(10, 20, 30)
 	 	ANY, SOME : 메인 쿼리의 비교조건이 서브쿼리의 결과와 하나 이상 일치하면 참 (부등호와 사용)
 	 	ALL		  : 메인 쿼리의 비교조건이 서브쿼리의 결과와 모든 값이 일치하면 참.
 	 	EXISTS	  : 메인 쿼리의 비교조건이 서브쿼리의 결과 중에서 만족하는 값이 하나라도 존재하면 참.
 	 	
 	 	select *
 	 	from dept
 	 	where exists (select *		----> 서브쿼리 결과가 1행 이상이면 true
 	 					from emp
 	 					where 1 = 0);
 	 	====> 실행 결과 없음.
 	 	====> 데이터 존재 유무에 따라 select, delete, update, insert시 제어하는 역할로 사용
 	 	====> 서브쿼리의 결과가 있느냐 없느냐만 체크
 	 	사용법) where exist (서브쿼리)
 	 		   where not exists (서브쿼리)
	
	문제) 급여를 3000이상 받는 사원이 소속된 부서와 동일한 부서에 근무하는 사원들의 사원명, 급여, 부서번호를 출력하시오.
		    -------------------------------
		 	           조건!
		 	
		select ename, sal, deptno
		from emp
		where deptno IN (select deptno
						from emp
						where sal >= 3000);	 		   
 	 	
 	 	===> deptno IN (10,20,10);
 	 					
	문제) 부서번호가 30번인 사원들 중 급여를 가장 많이 받는 사원보다 더 많은 급여를 받는 사원의 사원명, 급여를 출력.
		 (ALL 다중 행 연산자 사용!)
		 
		select ename, sal
		from emp
		where sal > (select max(sal)
					from emp
					where deptno=30);
					
					
		select ename, sal
		from emp
		where sal > ALL(select sal
					from emp
					where deptno=30);
					
					
	문제) 부서번호가 30번인 사원들 중 급여를 가장 적게 받는 사원보다 더 많은 급여를 받는 사원의 사원명, 급여를 출력.
			(ANY 다중 행 연산자 사용!!)
			
		select ename, sal
		from emp
		where sal > ANY(select sal
					 from emp
					 where deptno=30);
					 
					 
		select ename, sal
		from emp
		where sal > (select min(sal) ---> 950
					 from emp
					 where deptno=30);

==========================================================================================
 <서브쿼리 문제>
 문제1) SCOTT와 급여가 동일하거나 더 많이 받는 사원의 이름과 급여 출력
 		select ename, sal
 		from emp
 		where sal >= (select sal
 							from emp
 							where ename='SCOTT');
 
 문제2) 직급(job)이 사원(CLERK)인 사람이 속한 부서의 부서번호와 부서명, 부서위치를 출력
 		select deptno, dname, loc
 		from dept
 		where deptno in (select deptno
 						 from emp
 						 where job='CLERK');
 						 
 문제3) 사원명에 'T'를 포함하고 있는 사원들과 같은 부서에서 근무하고 있는 사원의 사원번호와 이름을 출력.
 		select empno, ename, deptno
 		from emp
 		where deptno in (select deptno
	 							from emp
	 							where ename like '%T%');
	 						
 문제4) 부서위치가 NEW YORK인 모든 사원의 이름, 부서번호를 출력
 		select ename, deptno
 		from emp
 		where deptno in (select deptno
 								from dept
 								where loc='NEW YORK');
 						 
 문제5) SALES부서의 모든 사원의 이름과 급여 출력
 		select ename, sal
 		from emp
 		where deptno in (select deptno
 								from dept
 								where dname='SALES');
 						
 문제6) KING에게 보고하는 모든 사원의 이름과 급여를 출력
 		select ename, sal
 		from emp
 		where mgr = (select empno
 					from emp
 					where ename='KING');
 					
 문제7) 자신의 급여가 평균 급여보다 많고 이름에 'S'가 들어가는 사원과
 	  ----------------------- --------
 	  		(1번째 조건)		  (2번쨰 조건)
 	     동일한 부서에서 근무하는 모든 사원의 사원번호, 사원명, 급여 출력.
 	     
		select empno, ename, sal
		from emp
		where deptno in (select deptno
						  from emp
						  where ename = '%S%' and sal > (select avg(sal) from emp);
						  
		where 그룹함수()				 --> 에러
		where sal > avg(sal)		 --> 에러
		where sal > (select avg(sal) --> 정상실행
					 from emp)
						  
		group by deptno			---> 그룹생성 (10번 부서, 20번 부서, 30번 부서)
		
==================================================================================
 <DDL> Data Definition Language : (객체)데이터 정의어
 								  -----
 								  TABLE, VIEW, SEQUENCE, TRIGGER
  - create, drop, alter, rename, truncate
  ===> DDL은 AUTO커밋!
  
	<테이블(객체) 생성>
	
	형성)
		CREATE TABLE 테이블명(
			컬럼명1 자료형,
			컬럼명2 자료형,
			컬럼명3 자료형
		);
	
	<자료형> 데이터 : 문자, 숫자, 날짜 이미지 등
	CHAR : 주어진 크기만큼 고정길이 문자 저장 1바이트 ~ 2000바이트
		   pName char(10)
		   
	VARCHAR2 : 주어진 크기만큼 가변길이의 문자 저장 1바이트 ~ 4000바이트
		   pName varchar2(10)
		   
	NUMBER(p[,s]) : 정밀도와 스케일로 표현되는 숫자
		   -----
		 바이트 수 생략 가능
		 
			number(7,2) ----> 전체 자릿수 7, 소숫점 이하 2자리까지 표현
								------------------------> 정수는 5자리 까지
								
			예) no number(7,2)	-----> 12345.67
				입력 ===> 12345		(o)
				입력 ===> 99999		(o)
				입력 ===> 123456		(x)
				입력 ===> 12345.678	(o)	--> 저장: 12345.68
				입력 ===> 99999.99	(o)
				입력 ===> 99999.992	(o)
				입력 ===> 99999.995	(x)	--> 저장 : 100000.00
				
			pName	varchar2(10)	---> (o)	
			pName	varchar2		---> (x)	
			pAge	number(10)	---> (o)	
			pAge	number	---> (o)	
				
			
	DATE : 날짜 형식 저장
	TIMESTAMP : DATE형의 확장된 형태
	BLOB : 대용량의 바이너리 데이터를 저장, 최대 4GB
	CLOB : 대용량의 텍스트 데이터를 저장, 최대 4GB
  	BFILE : 대용량의 바이너리 데이터를 파일 형태로 저장, 최대 4GB
  
  
 	create table emp
	( );
		---->  ORA-00904: : invalid identifier
			===> 테이블을 생성하기 위해서는 최소 한 개 이상의 컬럼을 정의해야 함!!

	create table emp( 
		empno number(4)
	);
		----> ORA-00955: name is already used by an existing object
			===> 이미 존재하는 테이블명(객체명)과 같은 이름은 생성 불가!!
                    
	create table 2emp( 
		empno number(4)
	);    
		----> ORA-00903: invalid table name    
			===> 부적절한 테이블명(식별자명)   : 숫자 첫글자X,  예약어X, 특수문자X
    
	create table emp2( 
		empno number(4)
	);    
		===> Table created. ^^*

	create table emp3( 
		empno number(4)
		ename varchar2(15)
		sal   number(7,2)
	);       
		---> ORA-00907: missing right parenthesis
			==> 두개 이상의 컬럼을 정의할 때 그 구분을 위해 ','(콤마)를 사용!!
       
	create table emp3( 
		empno number(4),
		ename varchar2(15),
		sal   number(7,2)
	); 
		===> Table created.

	select * from emp2;
	select * from emp3;
		===> no rows selected (조회 결과 없음!!)

 <서브쿼리를 이용한 테이블 생성>
  - 기존 테이블의 구조(컬럼,자료형)와 (행)데이터를 복사
  - 제약(constraint)은 복사에서 제외!!

	형식)
		CREATE TABLE 테이블명
		AS 서브쿼리;
   
	create table emp4
	as select * from emp;
		===> 테이블 생성

	SQL> desc emp4
	 Name                                      Null?    Type
	 ----------------------------------------- -------- ----------------------------
	 EMPNO                                              NUMBER(4)
	 ENAME                                              VARCHAR2(10)
	 JOB                                                VARCHAR2(9)
	 MGR                                                NUMBER(4)
	 HIREDATE                                           DATE
	 SAL                                                NUMBER(7,2)
	 COMM                                               NUMBER(7,2)
	 DEPTNO                                             NUMBER(2)
 
 ==> 제약(empno에 대한 not null제약은 복사되지 않음!!)
 ==> not null : 행 입력시 데이터를 반드시 입력받겠음.
 
	SQL> desc emp
	 Name                                      Null?    Type
	 ----------------------------------------- -------- ----------------------------
	 EMPNO                                     NOT NULL NUMBER(4)
	 ENAME                                              VARCHAR2(10)
	 JOB                                                VARCHAR2(9)
	 MGR                                                NUMBER(4)
	 HIREDATE                                           DATE
	 SAL                                                NUMBER(7,2)
	 COMM                                               NUMBER(7,2)
	 DEPTNO                                             NUMBER(2)

	SQL> select count(*) from emp3;

	  COUNT(*)
	----------
	         0

	SQL> select count(*) from emp4;

	  COUNT(*)
	----------
	        14
        
	select empno,ename,sal
	from emp4;
        
	     EMPNO ENAME                       SAL
	---------- -------------------- ----------
	      7369 SMITH                       800
	      7499 ALLEN                      1600
	      7521 WARD                       1250
	      7566 JONES                      2975
	      7654 MARTIN                     1250
	      7698 BLAKE                      2850
	      7782 CLARK                      2450
	      7788 SCOTT                      3000
	      7839 KING                       5000
	      7844 TURNER                     1500
	      7876 ADAMS                      1100
	      7900 JAMES                       950
	      7902 FORD                       3000
	      7934 MILLER                     1300


  
  