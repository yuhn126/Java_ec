/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-07-16 03:18:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._0716;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;
import javax.sql.DataSource;
import javax.naming.InitialContext;
import javax.naming.Context;

public final class dbcp_005ftest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t\t<title>DBCP(DataBase Connection Pool)테스트</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<h3>DBCP(DataBase Connection Pool)테스트</h3>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<form method=\"post\">\r\n");
      out.write("\t\t\t사번 : <input type=\"text\" name=\"empno\">\r\n");
      out.write("\t\t\t<input type=\"submit\" value=\"검색\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t");

		
		/*
			※객체 등록, 조회, 삭제 ---------> Context
												 ctx
			<객체 등록>
			ctx.bind("이름", 객체);
				
				
				         key		   value
			예) ctx.bind("p1", new Person("홍길동",13));
			    ctx.bind("p1", new Person("길라임",15));
			    	---> 에러 발생! (같은 키 값 사용 불가)
			    
			    ctx.rebind("이름", "객체");
			    ctx.rebind("p1", new Person("길라임",15));
			    	---> 등록성공!
			    	
			    ctx.bind("jdbc/oracle", new DataSource());
			    	
			    	
			<객체조회>
			Object ctx.lookup("이름");
			 
			예) Person p = (Person)ctx.lookup("p1");
				DataSource ds = ctx.lookup("jdbc/oracle");
				
				
			<객체삭제>
			ctx.unbind("이름");
			
			예) ctx.unbind("p1");
			
			RMI 프로토콜
		*/
		if(request.getMethod().equals("POST")){ //"GET", "POST"
			//폼 내의 '검색'버튼을 클릭했다면
			Context ctx = new InitialContext();
		
			//톰캣 서버가 갖는 환경관련 Context 얻기
			Context tomCtx = (Context)ctx.lookup("java:comp/env");
			
			DataSource ds = (DataSource)tomCtx.lookup("jdbc/oracle");
			//ds == 커넥션 풀!
					
			Connection conn = ds.getConnection();
			//커넥션 풀 내의 미리 생성된(준비)된 Connection요청(주소 얻어오기)
			
			System.out.println("DB연결 성공^0^");
			String empno = request.getParameter("empno");
			
			String sql = "select ename from emp where empno = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(empno));
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()){ //사번에 일치하는 사원명을 찾았다면
				out.print(empno + "사번은 [" + rs.getString("ename") + "]사원입니다.");
			} else {
				out.print("<font color='tomato'>" + empno + "사번이 존재하지 않습니다. </font>");
			}
			
		}//if 요청방식 == POST
		
		
      out.write("\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
