
 <Java Application>
  ---> 한 개의 main()메소드를 가지고 독립적으로 실행하는 자바 클래스
  
 <Java Web Application>
  ---> 브라우저에서 실행되는 자바클래스 (main()비포함)
  		(Servlet/JSP)
  ---> 서블릿과 JSP를 실행하기 위해서는 Web Application Server가 필요
  							   -----------------------
  							   			WAS! 와스
  							   			
 <서블릿> javax.servlet.Servlet
  - 자바 플랫폼에서 컴포넌트를 기반으로 한 웹 애플리케이션을 개발할 때 사용.
  - 스레드를 기반으로 하므로 웹 애플리케이션 운영에 효율적.
  - 자바를 기반으로 하므로 자바 API를 모두 사용할 수 있다.
  - 운영체제나 하드웨어에 영향을 받지 않으므로 한 번 개발된 애플리케이션은 다양한 서버 환경에서도 실행이 가능.
  - 웹 애플리케이션에서 효율적인 자료 공유 방법을 제공.
  - JSP는 서블릿을 기반으로 한 기술.
  
 <웹 애플리케이션 개발 시 서블릿을 사용하면 좋은 점>
  - 콘텐츠와 비즈니스 로직을 분리 할 수 있다.
  - 컨트롤러와 뷰의 역할 분담으로 인해 웹 디자이너와 개발자간의 원활한 작업이 가능.
  - 유지보수가 수월.
  - 기능확장이 용이하다.
  
 <서블릿 클래스의 상속관계>
 	Javax.servlet.Servlet(인터페이스)
 				 |
 				 |
 	Javax.servlet.GenericServlet(클래스)
 				 |
 				 |
 	Javax.servlet.http.HttpServlet(클래스)
 	
=============================================================================================

 <서블릿의 생명주기 메소드> ★ Life Cycle
 1. init()메소드
 	- 서블릿 적재
 	- 서블릿 로딩
 	- 서블릿 초기화 메소드(서블릿의 생성자!)
 
 2. service()메소드
 	- service(request, response)
	- 웹 브라우저에 서비스(화면 출력)하는 메소드
 	- 클라이언트 요청에 따라 doGet()이나 doPost()메소드로 분기
 	- 사용자 요청 처리는 request(요청객체, client, 아이객체, 브라우저)로
 		      응답 처리는 response(응답객체, server, 톰캣)로 처리함
 
 3. destroy()메소드
 	- 서블릿 종료 직전 호출
	- 컨테이너로부터 서블릿 종료 요청이 있을 때 서블릿 종료 직전에 해야 할 작업을 명시 할 때 사용.
	- 대부분의 경우 컨테이너가 종료될 때 실행.
				------
			아파치 톰캣 ===> 서블릿 컨테이너!
					          -------
					       	 서버, 실행기
					       	 
=============================================================================================

 <서블릿 실행 방법>
  1. http://192.168.0.38:8282/TomTest/servlet/com.encore.t0708.MyServlet
  			---> 보안상 문제 발생
  			
  2. WEB-INF/web.xml에 작성된 서블릿 클래스를 등록
  			---> 등록과 함께 서블릿에 대한 가상의 경로를 매핑시켜서 호출.
	
	
	
 MyServlet클래스 호출(아파치톰캣에서 하는 일)
  1. 클래스 유무 체크
  2. 메모리 적재 체크
  3. 메모리 적재가 안되었을 때	 -->  메모리 적재 - init()호출 - service()호출
  	  메모리 적재가 되었을 때       -->  service()호출
  	 
  	 req : 요청 객체, 브라우저, 클라이언트를 의미
  	 	      클라이언트 정보를 얻을 때 사용
  	 	      
  	 resp : 응답 객체, 서버를 의미
  	 		클라이언트에게 서비스를 할 때 사용
  	 		브라우저 출력 객체를 생성할 때 사용
	
	
	
	
	
	
	
	
	
	
	
		 
 