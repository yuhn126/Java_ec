3. 구성요소 형식
   [필드형식 2]
   	자료형 변수명;  //변수 선언
   [메소드형식 4]
   	리턴자료형 메소드명()
	{

	}

	리턴 자료형 : 리턴형, returnDataType, returnType
		   메소드를(영역 괄호내의 문장들을) 실행한 후의 결과값을 표현
		   자료형만 명시

	매개 변수 : 메소드 실행 전 외부에서 전달되는 데이터 표현
		  변수 선언
   [클래스형식 3]
   	class 클래스명{
	    변수 선언
	    int i1;   --> 필드

	    메소드 정의, 구현
	    void hello(int i2){  --> 지역변수
		int i3;          --> 지역변수
	    }

	    int i4;  //위치 비권장
	}

	---> 저장 : 클래스명.java (대소문자 구분!!)


4. 구성요소 사용법
    [필드사용]
      변수명 = 데이터;    //변수 초기화(값 할당)

    [메소드 사용]
      --> 호출해서 사용!!
      --> 메소드 호출 : 메소드명();
                      hello();
		      hello(1000);

    [클래스 사용]
      --> 객체(=object, instance, entity)생성해서 사용!!     객체 생성 = 메모리 할당
      
      *객체 생성식*
        A       obj   =    new           A   ();
      클래스명  참조변수명  메모리할당키워드    클래스명

      class A{
	int su=300;

	void hello(){
	    System.out.println("안녕하세요~!");
	}
      }

      --> 프로그램을 사용하기 위해 객체 생성을 한다.
      --> A obj = new A();	// obj-->참조변수
      	  --> 메모리 로딩(su, hello())
      	  --> A클래스를 사용 할 준비가 끝남
	  --> A클래스내의 필드, 메소드를 사용할 준비가 끝남
      
      사용법) 참조변수명.필드명;
      	     참조변수명.메소드명();
	     obj.su
	     obj.hello();

	     obj.~         --> A클래스에 있는(A클래스내에 존재하는~)
	     obj.su        --> A클래스에 있는 su필드
	     obj.hello();  -->


    <변수 선언>
      기본자료형 변수명;    --> 속성변수
      클래스자료형 변수명;   --> 참조(reference,주소)변수

=======================================================================
<자바 연산자>
1. 산술연산자
  + - * / %

2. 증감연산자
  ++(1증가) , --(1감소)

  사용법)  변수명++     ++변수명
	 후위연산자    전위연산자
	(나중연산자)  (먼저연산자)

 int su = 300;
 su = su+1;	//301
 su++;		//302
 ++su;		//303
 su--;		//302

 int su3 = 50;

  ※참고
	2씩 증가?   su = su+2;
		  ----->su += 2;
	5씩 증가?   su = su+5;
		  ----->su += 5;


3. 비교(관계)연산자 (결과값 boolean!)
    >(크다) <(작다) ==(같다) !=(다르다) >=(크거나 같다) <=(작거나 같다)

    ※ 주의)
       반드시 부등호 먼저
       >= : 에러x
       => : 에러
       띄어쓰기 불가
       > = : 에러

4. 논리연산자 (결과값 boolean)
  && (and연산자)
  || (or연산자)

  ※ A,B는 boolean 데이터!
   (true = 1, false = 0 이라는 가정)

  A && B  ----> 모든 조건(A,B)을 만족했을 때 결과값 true
  0    0    :   false
  0    1    :   false
  1    0    :   false
  1    1    :   true


  A || B  ----> 하나의 조건(A,B)이라도 만족했을 때 결과값 true
  0    0    :   false
  0    1    :   true
  1    0    :   true
  1    1    :   true

===========================================================
class 클래스명{
	리턴형 메소드형(변수 선언){
		//변수선언
		//
	}
}
===========================================================
<조건문>
- 조건에 따라 실행할 문장들을 제어하는 역할.
- 반드시 메소드내에 기술

1.if문
  형식)
     if(조건식){  //조건식 conditions : boolean데이터!
	//조건식의 결과가 true일때 실행 할 문장;
     }
2.if~else문
3.switch~case문
4.if~elif~else문