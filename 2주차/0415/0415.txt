이클립스 단축키 : 메뉴 window - references - general - keys
	ctrl + space          : 자동 완성 기능
	ctrl + 1              : 제안 기능
	ctrl + /   		    : 한 줄 주석 추가, 삭제
	ctrl + alt + 아래화살표   : 선택된 블럭을 복사여 아래쪽으로 붙여넣기
	alt + 위아래화살표              : 선택된 블럭을 위,아래로 이동
		
	글씨 크기 조정 : ctrl + shift + +
	글씨 크기 조정 : ctrl + shift + -

==============================================================================================

<접근지정(제한)자> : AccessControl
	public		 - 서로 다른 패키지에서도 접근 가능
	protected    - 서로 같은 패키지에서 접근 가능, 만약 상속관계를 갖는다면 다른 패키지라도 자식이 부모를 참조!!
	default(생략) - 서로 같은 패키지에서 접근 가능
	private		 - 같은 클래스 내에서만 (멤버끼리만) 접근 가능
	
====> 접근지정자 위치
 1. 필드
 	[접근 지정자 4개] 자료형 변수명;
 2. 메소드
	[접근 지정자 4개] 리턴자료형 메소드명(){
	
	}
 3. 클래스
    [접근 지정자 2개 (public, default)] class 클래스명{
    
    }
    
	
	
	package p1
	
	class Parent{
		public void m1(){}
		protected void m2(){}
			void m3(){}
		private void m4(){}
	}
	
	class Child extends Parent{
		m4 호출 불가
	}
	
	class Other{
		Parent p = new Parent();
		p.m4 호출 불가
	}
	
	package p2
	
	class Child extends Parent{
		m3, m4 호출 불가
	}
	
	package p3
	
	class Other{
		m2,m3,m4 호출 불가
	}
	
	
==============================================================
<this> 자기참조 연산자
 ====> 현재 클래스를 가르키는 레퍼런스 변수(참조변수)!!
 ====> 보통은 생략함
 
1. 메소드 내에서 사용.
2. 객체 생성자내에서 다른 생성자를 호출시 사용.
3. 매개변수(지역변수)와 멤버면수(필드)를 구분하기 위해 멤버변수 앞에 this을 붙여 사용.


형식) this.필드명
	 this.메소드명();
	 this();  //생성자 호출
	 
참고) super.필드명
	 super.메소드명();
	 super(); //부모 클래스 생성자 호출
	 
===============================================================
<interface> 인터페이스
 형식)
 	interface 인터페이스명{
 		//필드
 		[고정 public static final]int su;
 		//선언된 메소드 		
 		[고정 public abstract]void print();
 	}
 	
-----> 저장 : 인터페이스명.java ---컴파일---> 인터페이스명.class

 - interface의 구성멤버는 필드, 선언된 메소드로만 구성.
 	void print(){
 	
 	} ---> 정의된 메소드, 구현된 메소드!

	void print();	  --->    선언된 메소드 (바디없는, 영역괄호 없는 메소드)
	
<손님의 입장>
	- 서로 다른 제품에 연결할 수 있는 공통 연결 모듈을 의미.
	
<주방의 입장(객체를 생성하는 곳)>
	- 클래스에 다중 상속을 구현할 수 있다.
	- 인터페이스는 어떻게 사용? 클래스에 구현해서 사용!
								---
						     키워드 : implements
						     
 class 클래스명  implements 인터페이스명{
 	   ------ ----------
 	   	 주방	      구현의 약속
 }
====================================================================
<클래스와 인터페이스간의 상속 문법>
class A{}

class B extends A{	//extends 뒤에는 상속 받고자 하는 한 개의 클래스명만 정의!
		-------
		    확장(자식클래스를 확장클래스!!)

}
--------------------------------------------------------------------
interface A{}
interface B{}

class C implements A,B{	//주방, A와 B인터페이스내의 선언돈 메소드를 C클래스에서 전부 구현!
	          구현의 약속
}
--------------------------------------------------------------------
interface A{}
class B{}
class C implements A extents B{
	//에러발생 : 클래스와 인터페이스를 동시에 상속할때는 클래스 먼저, 인터페이스 나중
	//implements가 먼저 나오면 컴파일러가  extends Object를 implements키워드 앞에 추가해줌
}--->(X) 

class C extents B implements A{

}--->(O)
--------------------------------------------------------------------
interface A { void hello(); }
interface B { void hi(); }

interface C extents A,B{  // implements(x)
	void good();
}

hello();
hi();
good();

--------------------------------------------------------------------
class A { void hello(){} }

interface B      A{

} ---> implements, extents 둘다 안됨!

====================================================================
<final>
1. final 자료형 변수명;
   ----> 마지막 변수 : 상수(constant) : 값 변경 불가
   ----> 상수의 식별을 위해 전체 대문자로 표기.
   
   예) int max = 100;
   	 max++; ---> 101;
   	 
   	 final int MAX = 100;
   	 MAX++; ---> 에러
	 
2. final 리턴형 메소드명() {};
   ---> 마지막 메소드 : 오버라이딩(메소드 재정의) 할 수 없는 메소드	 
   
3. final class 클래스명{}
   ---> 마지막 클래스 : 자식 클래스를 갖지 않는 클래스(터미널 클래스)
   ---> 완벽한 클래스(자식 통한 기능 확장을 원치 않는다)
   ---> 보안 (ex String)